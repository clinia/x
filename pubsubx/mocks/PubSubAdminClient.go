// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kadm "github.com/twmb/franz-go/pkg/kadm"
)

// PubSubAdminClient is an autogenerated mock type for the PubSubAdminClient type
type PubSubAdminClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *PubSubAdminClient) Close() {
	_m.Called()
}

// CreateTopic provides a mock function with given fields: ctx, partitions, replicationFactor, topic, configs
func (_m *PubSubAdminClient) CreateTopic(ctx context.Context, partitions int32, replicationFactor int16, topic string, configs ...map[string]*string) (kadm.CreateTopicResponse, error) {
	_va := make([]interface{}, len(configs))
	for _i := range configs {
		_va[_i] = configs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, partitions, replicationFactor, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 kadm.CreateTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int16, string, ...map[string]*string) (kadm.CreateTopicResponse, error)); ok {
		return rf(ctx, partitions, replicationFactor, topic, configs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int16, string, ...map[string]*string) kadm.CreateTopicResponse); ok {
		r0 = rf(ctx, partitions, replicationFactor, topic, configs...)
	} else {
		r0 = ret.Get(0).(kadm.CreateTopicResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int16, string, ...map[string]*string) error); ok {
		r1 = rf(ctx, partitions, replicationFactor, topic, configs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopic provides a mock function with given fields: ctx, topic
func (_m *PubSubAdminClient) DeleteTopic(ctx context.Context, topic string) (kadm.DeleteTopicResponse, error) {
	ret := _m.Called(ctx, topic)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 kadm.DeleteTopicResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (kadm.DeleteTopicResponse, error)); ok {
		return rf(ctx, topic)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) kadm.DeleteTopicResponse); ok {
		r0 = rf(ctx, topic)
	} else {
		r0 = ret.Get(0).(kadm.DeleteTopicResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopicConfigs provides a mock function with given fields: ctx, topics
func (_m *PubSubAdminClient) DescribeTopicConfigs(ctx context.Context, topics ...string) (kadm.ResourceConfigs, error) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTopicConfigs")
	}

	var r0 kadm.ResourceConfigs
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (kadm.ResourceConfigs, error)); ok {
		return rf(ctx, topics...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) kadm.ResourceConfigs); ok {
		r0 = rf(ctx, topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kadm.ResourceConfigs)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, topics...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopics provides a mock function with given fields: ctx, topics
func (_m *PubSubAdminClient) ListTopics(ctx context.Context, topics ...string) (kadm.TopicDetails, error) {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 kadm.TopicDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) (kadm.TopicDetails, error)); ok {
		return rf(ctx, topics...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) kadm.TopicDetails); ok {
		r0 = rf(ctx, topics...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kadm.TopicDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, topics...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPubSubAdminClient creates a new instance of PubSubAdminClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSubAdminClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSubAdminClient {
	mock := &PubSubAdminClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
