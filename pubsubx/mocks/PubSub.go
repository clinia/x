// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	messagex "github.com/clinia/x/pubsubx/messagex"
	mock "github.com/stretchr/testify/mock"

	pubsubx "github.com/clinia/x/pubsubx"
)

// PubSub is an autogenerated mock type for the PubSub type
type PubSub struct {
	mock.Mock
}

// AdminClient provides a mock function with given fields:
func (_m *PubSub) AdminClient() pubsubx.PubSubAdminClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AdminClient")
	}

	var r0 pubsubx.PubSubAdminClient
	if rf, ok := ret.Get(0).(func() pubsubx.PubSubAdminClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsubx.PubSubAdminClient)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *PubSub) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publisher provides a mock function with given fields:
func (_m *PubSub) Publisher() pubsubx.Publisher {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Publisher")
	}

	var r0 pubsubx.Publisher
	if rf, ok := ret.Get(0).(func() pubsubx.Publisher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsubx.Publisher)
		}
	}

	return r0
}

// Subscriber provides a mock function with given fields: group, topics, opts
func (_m *PubSub) Subscriber(group string, topics []messagex.Topic, opts ...pubsubx.SubscriberOption) (pubsubx.Subscriber, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, group, topics)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscriber")
	}

	var r0 pubsubx.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []messagex.Topic, ...pubsubx.SubscriberOption) (pubsubx.Subscriber, error)); ok {
		return rf(group, topics, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, []messagex.Topic, ...pubsubx.SubscriberOption) pubsubx.Subscriber); ok {
		r0 = rf(group, topics, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pubsubx.Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []messagex.Topic, ...pubsubx.SubscriberOption) error); ok {
		r1 = rf(group, topics, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPubSub creates a new instance of PubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSub(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSub {
	mock := &PubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
