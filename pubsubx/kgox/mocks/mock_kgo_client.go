// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kgo "github.com/twmb/franz-go/pkg/kgo"

	mock "github.com/stretchr/testify/mock"
)

// MockKgoClient is an autogenerated mock type for the KgoClient type
type MockKgoClient struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *MockKgoClient) Close() {
	_m.Called()
}

// PollRecords provides a mock function with given fields: ctx, maxPollRecords
func (_m *MockKgoClient) PollRecords(ctx context.Context, maxPollRecords int) kgo.Fetches {
	ret := _m.Called(ctx, maxPollRecords)

	if len(ret) == 0 {
		panic("no return value specified for PollRecords")
	}

	var r0 kgo.Fetches
	if rf, ok := ret.Get(0).(func(context.Context, int) kgo.Fetches); ok {
		r0 = rf(ctx, maxPollRecords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kgo.Fetches)
		}
	}

	return r0
}

// NewMockKgoClient creates a new instance of MockKgoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKgoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKgoClient {
	mock := &MockKgoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
